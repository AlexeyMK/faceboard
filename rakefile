require 'colored'

def die(msg, status=1)
  puts "Error[#{status||$?}]: #{msg}".red
  exit status||$?
end

def announce(cmd)
  puts "> " + cmd.yellow
end

def sys(cmd)
  announce(cmd)
  if not system(cmd) then
    die "failed!"
  end
end

def revision()
  $revision = `git rev-parse HEAD`.strip
  $short_revision = $revision[0...7]
end

def is_cwd_clean?
  system("test -z \"$(git status --porcelain)\" > /dev/null")
end

def dirty_repo_warning()
  puts "Repository is not clean! You should commit all changes before releasing.".red unless is_cwd_clean?
end

def patch(path, replacers)
  puts "Patching #{path.blue}"
  lines = []
  File.open(path, "r") do |f|
  f.each do |line|
    replacers.each do |r|
    line.gsub!(r[0], r[1])
    end
    lines << line
  end
  end
  File.open(path, "w") do |f|
    f << lines.join
  end
end

def build!
  sys("lein clean")
  sys("lein garden once")
  sys("rm -rf resources/public/_generated")
  sys("lein cljsbuild once production")
  sys("lein aggravate")
end

def reset_build_dir!
  chdir(".build") do
    sys("git reset --hard HEAD")
    sys("git clean -f -d")
  end
  sys("rm -rf .build/*")
end

def copy_build!
  sys("cp -r resources/public/* .build")
end

def patch_build!
  chdir(".build") do
    sys("rm -rf css")
    sys("mkdir css && mv _generated/faceboard.css css")
    sys("rm -rf js")
    sys("mkdir js && mv _generated/prod/faceboard.js js")
    sys("rm -rf _generated")
    sys("rm -rf codemirror")
    sys("mv index-production.html index.html")
    patch("index.html", [["window.faceboard_env = {}", 
      "window.faceboard_env = {
        \"production\": true, 
        \"github-pages\": true, 
        \"git-revision\": \"#{$revision}\"
      }"]])
    sys('echo "fb.binaryage.com" > CNAME') # TODO: support hacker paradise
  end
end

desc "init build dir for github pages"
task :init_build do
  sys("rm -rf .build")
  sys("git clone git@github.com:darwin/faceboard.git .build")
  chdir(".build") do
    sys("git checkout gh-pages")
  end
end

desc "prepare build for github pages"
task :prepare_build do
  skip_build = ENV["skipbuild"] || false
  dirty_repo_warning()
  revision()

  reset_build_dir!
  build! unless skip_build
  copy_build!
  patch_build!
end

desc "deploy to heroku"
task :deploy_heroku do
  dirty_repo_warning()
  revision()
  sys("git push heroku master:master")
  sys("heroku config:set HEROKU=1 PRODUCTION=1 GIT_REVISION=#{$revision}")
end

desc "deploy to github pages"
task :deploy_github => [:prepare_build] do
  chdir(".build") do
    sys("git add --all && git commit -m \"Deploy darwin/faceboard@#{$short_revision}\"")
    sys("git push origin gh-pages")
  end
end

desc "serve"
task :serve do
  ENV["PORT"] = "3000"
  sys("lein uberjar")
  sys("foreman start")
  puts "=> http://localhost:3000"
end

task :default => :serve